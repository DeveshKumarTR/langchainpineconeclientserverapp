name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check .
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short
      env:
        # Mock environment variables for testing
        PINECONE_API_KEY: test-key
        OPENAI_API_KEY: test-key
        PINECONE_INDEX_NAME: test-index

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Security scan with bandit
      run: |
        bandit -r server/ client/ config/ -f json -o bandit-report.json || true
    
    - name: Check dependencies with safety
      run: |
        safety check --json --output safety-report.json || true

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        echo "FROM python:3.11-slim
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        COPY . .
        EXPOSE 5000
        CMD [\"python\", \"server/app.py\"]" > Dockerfile
        
        docker build -t langchain-pinecone-app .
    
    - name: Test Docker image
      run: |
        docker run --rm -d -p 5000:5000 --name test-app \
          -e PINECONE_API_KEY=test \
          -e OPENAI_API_KEY=test \
          langchain-pinecone-app
        sleep 10
        curl -f http://localhost:5000/health || exit 1
        docker stop test-app
